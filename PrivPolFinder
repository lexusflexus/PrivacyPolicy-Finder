# import module
import requests
import re
from urllib.parse import urlparse
import time
from threading import Thread
import argparse
import os

COMPLETED = 0

parser = argparse.ArgumentParser(description="Performs a URL check with known privacy policy URI names to find URI based on URL provided in URL.txt")
parser.add_argument("-c", help="The client name", required=True)
args=parser.parse_args()

#read file of URLs provided from vendor management file and confirms its in the correct syntax
def add_HTTPS(url_array):
    url_with_https = []
    website_ends = (".net",".org",".gov",".edu",".com",".io", ".net/",".org/",".gov/",".edu/",".com/",".io/")
    
    for i in url_array:
    
        if not re.match('(?:https|http)://', i):
            i = 'https://{}'.format(i)
        
        if not i.endswith(website_ends):
            i = urlparse(i).netloc
            i = 'https://{}'.format(i)
            
        if not i.endswith("/"):
            i = '{}/'.format(i)
           
        url_with_https.append(i)
        
    return url_with_https

#Reads the file and supplies it to an array
def read_file():
    URLS = []
    with open("URLS.txt") as file:
        URLS = [line.rstrip() for line in file]
    return URLS


#Tries to find privacy statement/policy 
def url_checker(url_array_https):

    #array of possibilities to add to the end of the URL
    privacy_appends = ["privacy","privacy-statement","privacy-policy","privacystatement","privacypolicy"]
    pp_found = []
    pp_fail_counter = 0
    for i in url_array_https:
        for j in privacy_appends:
            url = ('{}' + j).format(i)       
	    # exception block
            try:      
                response = requests.head(url, allow_redirects=True)    
		#check the status code
                if response.status_code == 200:
                    pp_found.append(response.url + " ")
                
                else:
                   #adds to fail counter to track when manual review is required
                   pp_fail_counter +=1
                   
            except requests.ConnectionError as e:
                return e
 
        if pp_fail_counter == len(privacy_appends):
            pp_found.append("No privacy statement found, please review")
            pp_fail_counter = 0
        
        else:
            pp_fail_counter = 0        
        
        pp_found.append("/n")             
        
    return pp_found

def final_file(results, client):
    
    #creating the file and closing it
    fp = open(client + "-privacy-policy-search-results.txt",'x')
    fp.close()
    
    #writing over the file with the results information for easy copy paste capabilites
    with open(client + "-privacy-policy-search-results.txt","w", newline='') as file:
        for x in results:
            if x == "/n":
                x = ""
                file.write("\n")
            
            file.write(str(x))    
    	
def logo():
    print("\033[1;37;40m#################################################################")                       
    print(" \033[1;37;40m  ___      _                           ___      _ _")            
    print(" \033[1;37;40m / _ \_ __(_)_   ____ _  ___ _   _    / _ \___ | (_) ___ _   _") 
    print(" \033[1;37;40m/ /_)/ '__| \ \ / / _` |/ __| | | |  / /_)/ _ \| | |/ __| | | |")
    print("\033[1;37;40m/ ___/| |  | |\ V / (_| | (__| |_| | / ___/ (_) | | | (__| |_| |")
    print("\033[1;37;40m\/    |_|  |_| \_/ \__,_|\___|\__, | \/    \___/|_|_|\___|\__, |")
    print("\033[1;37;40m                              |___/                       |___/ ")
    print("\033[1;37;40m __                     _         __            _              ") 
    print("\033[1;37;40m/ _\ ___  __ _ _ __ ___| |__     /__\ __   __ _(_)_ __   ___ ")   
    print("\033[1;37;40m\ \ / _ \/ _` | '__/ __| '_ \   /_\| '_ \ / _` | | '_ \ / _ \  ") 
    print("\033[1;37;40m_\ \  __/ (_| | | | (__| | | | //__| | | | (_| | | | | |  __/   ")
    print("\033[1;37;40m\__/\___|\__,_|_|  \___|_| |_| \__/|_| |_|\__, |_|_| |_|\___|")   
    print("\033[1;37;40m                                          |___/                ") 
    print("\033[1;37;40m#################################################################")
    print()

def loading_screen():
    logo()
    global COMPLETED
    bar = [
    " [=     ]",
    " [ =    ]",
    " [  =   ]",
    " [   =  ]",
    " [    = ]",
    " [     =]",
    " [    = ]",
    " [   =  ]",
    " [  =   ]",
    " [ =    ]",
    ]
    i = 0
    
    while COMPLETED == 0:
        print("\033[1;33;40mSEARCHING FOR PRIVACY POLICIES:"+ bar[i % len(bar)], end="\r")
        time.sleep(.2)
        i += 1

def functions(client):
    global COMPLETED
    
    client = client
    url_array = read_file()
    url_array_https = add_HTTPS(url_array)
    results = url_checker(url_array_https)
    final_file(results, client)
    
    COMPLETED = 1
    
def main():
   client = args.c
   
   os.system("clear")
   t1 = Thread(target=loading_screen)
   t2 = Thread(target=functions, args=(client,))
  
   t1.start()
   t2.start()
   
   t1.join()
   t2.join()
   
   print("\033[1;32;40mSEARCHING FOR PRIVACY POLICIES COMPLETED [âœ“]")
   print("\033[1;37;40m File located:\033[1;34;40m /HOME/KALI/DESKTOP/")
   print("\033[1;37;40m File Name: \033[1;34;40m" + client + "-privacy-policy-search-results.txt")


main()

